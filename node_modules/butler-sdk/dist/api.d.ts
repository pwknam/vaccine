import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from './base';
export declare enum AppRunStatus {
    InProgress = "InProgress",
    Completed = "Completed",
    Failed = "Failed",
    Waiting = "Waiting"
}
export interface AppRunStatusDto {
    appRunId: string;
    status: AppRunStatus;
}
export declare enum DocExConfidence {
    High = "High",
    Low = "Low",
    UserReviewed = "UserReviewed"
}
export interface DocumentExtractionResultsDto {
    id: string;
    fileName: string;
    mimeType: string;
    documentType: string;
    extractedFields: Array<ExtractedFieldDto>;
    tables: Array<ExtractedTableDto>;
    confidenceScore?: DocExConfidence;
    extractionRange?: ExtractionRangeDto;
}
export declare enum DocumentStatus {
    UploadingFile = "UploadingFile",
    DetectingText = "DetectingText",
    ExtractingData = "ExtractingData",
    WaitingForButlerOpsReview = "WaitingForButlerOpsReview",
    WaitingForUserReview = "WaitingForUserReview",
    Completed = "Completed",
    Failed = "Failed"
}
export interface ExtraResultsDto {
    lineBlocks?: object | null;
    formFields?: object | null;
    tables?: object | null;
}
export interface ExtractedFieldDto {
    fieldName: string;
    value: string;
    confidenceScore: DocExConfidence;
}
export interface ExtractedTableCellDto {
    columnName: string;
    value: string;
    confidenceScore: DocExConfidence;
}
export interface ExtractedTableDto {
    tableName: string;
    rows: Array<ExtractedTableRowDto>;
    confidenceScore: DocExConfidence;
}
export interface ExtractedTableRowDto {
    cells: Array<ExtractedTableCellDto>;
}
export interface ExtractionRangeDto {
    startPage: number;
    endPage: number;
}
export interface ExtractionResultsDto {
    documentId: string;
    documentStatus: DocumentStatus;
    fileName: string;
    mimeType: string;
    documentType: string;
    confidenceScore?: DocExConfidence;
    extractionRange?: ExtractionRangeDto;
    formFields?: Array<ExtractedFieldDto>;
    tables?: Array<ExtractedTableDto>;
    extraResults?: ExtraResultsDto;
}
export declare enum ExtractionResultsSortBy {
    DocumentId = "DocumentId"
}
export interface LoginBodyDto {
    username: string;
    password: string;
}
export interface PaginatedExtractionResultsDto {
    hasNext: boolean;
    hasPrevious: boolean;
    totalCount: number;
    items: Array<ExtractionResultsDto>;
}
export declare enum SortOrder {
    Asc = "Asc",
    Desc = "Desc"
}
export interface UploadDocumentResponseDto {
    filename: string;
    documentId: string;
}
export interface UploadDocumentsUploadResponseDto {
    uploadId: string;
    documents: Array<UploadDocumentResponseDto>;
}
export declare const AppsApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    getAppRunStatus: (appRunId: string, options?: any) => Promise<RequestArgs>;
    getDocumentExtractionResults: (appRunId: string, options?: any) => Promise<RequestArgs>;
    uploadDocuments: (appId: string, files?: any[] | undefined, options?: any) => Promise<RequestArgs>;
};
export declare const AppsApiFp: (configuration?: Configuration | undefined) => {
    getAppRunStatus(appRunId: string, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<AppRunStatusDto>>;
    getDocumentExtractionResults(appRunId: string, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Array<DocumentExtractionResultsDto>>>;
    uploadDocuments(appId: string, files?: any[] | undefined, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
};
export declare const AppsApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    getAppRunStatus(appRunId: string, options?: any): AxiosPromise<AppRunStatusDto>;
    getDocumentExtractionResults(appRunId: string, options?: any): AxiosPromise<Array<DocumentExtractionResultsDto>>;
    uploadDocuments(appId: string, files?: any[] | undefined, options?: any): AxiosPromise<void>;
};
export declare class AppsApi extends BaseAPI {
    getAppRunStatus(appRunId: string, options?: any): Promise<import("axios").AxiosResponse<AppRunStatusDto, any>>;
    getDocumentExtractionResults(appRunId: string, options?: any): Promise<import("axios").AxiosResponse<DocumentExtractionResultsDto[], any>>;
    uploadDocuments(appId: string, files?: Array<any>, options?: any): Promise<import("axios").AxiosResponse<void, any>>;
}
export declare const AuthApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    login: (loginBodyDto: LoginBodyDto, options?: any) => Promise<RequestArgs>;
};
export declare const AuthApiFp: (configuration?: Configuration | undefined) => {
    login(loginBodyDto: LoginBodyDto, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
};
export declare const AuthApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    login(loginBodyDto: LoginBodyDto, options?: any): AxiosPromise<void>;
};
export declare class AuthApi extends BaseAPI {
    login(loginBodyDto: LoginBodyDto, options?: any): Promise<import("axios").AxiosResponse<void, any>>;
}
export declare const QueuesApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    extractDocument: (queueId: string, file?: any, options?: any) => Promise<RequestArgs>;
    getExtractionResults: (queueId: string, uploadId: string, afterId?: string | undefined, beforeId?: string | undefined, limit?: number | undefined, sortOrder?: SortOrder | undefined, extraResults?: Set<"LineBlocks" | "FormFields" | "Tables"> | undefined, sortBy?: ExtractionResultsSortBy | undefined, options?: any) => Promise<RequestArgs>;
    uploadDocumentsToQueue: (queueId: string, files?: any[] | undefined, options?: any) => Promise<RequestArgs>;
};
export declare const QueuesApiFp: (configuration?: Configuration | undefined) => {
    extractDocument(queueId: string, file?: any, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ExtractionResultsDto>>;
    getExtractionResults(queueId: string, uploadId: string, afterId?: string | undefined, beforeId?: string | undefined, limit?: number | undefined, sortOrder?: SortOrder | undefined, extraResults?: Set<"LineBlocks" | "FormFields" | "Tables"> | undefined, sortBy?: ExtractionResultsSortBy | undefined, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<PaginatedExtractionResultsDto>>;
    uploadDocumentsToQueue(queueId: string, files?: any[] | undefined, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<UploadDocumentsUploadResponseDto>>;
};
export declare const QueuesApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    extractDocument(queueId: string, file?: any, options?: any): AxiosPromise<ExtractionResultsDto>;
    getExtractionResults(queueId: string, uploadId: string, afterId?: string | undefined, beforeId?: string | undefined, limit?: number | undefined, sortOrder?: SortOrder | undefined, extraResults?: Set<"LineBlocks" | "FormFields" | "Tables"> | undefined, sortBy?: ExtractionResultsSortBy | undefined, options?: any): AxiosPromise<PaginatedExtractionResultsDto>;
    uploadDocumentsToQueue(queueId: string, files?: any[] | undefined, options?: any): AxiosPromise<UploadDocumentsUploadResponseDto>;
};
export declare class QueuesApi extends BaseAPI {
    extractDocument(queueId: string, file?: any, options?: any): Promise<import("axios").AxiosResponse<ExtractionResultsDto, any>>;
    getExtractionResults(queueId: string, uploadId: string, afterId?: string, beforeId?: string, limit?: number, sortOrder?: SortOrder, extraResults?: Set<'LineBlocks' | 'FormFields' | 'Tables'>, sortBy?: ExtractionResultsSortBy, options?: any): Promise<import("axios").AxiosResponse<PaginatedExtractionResultsDto, any>>;
    uploadDocumentsToQueue(queueId: string, files?: Array<any>, options?: any): Promise<import("axios").AxiosResponse<UploadDocumentsUploadResponseDto, any>>;
}
