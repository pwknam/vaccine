"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueuesApi = exports.QueuesApiFactory = exports.QueuesApiFp = exports.QueuesApiAxiosParamCreator = exports.AuthApi = exports.AuthApiFactory = exports.AuthApiFp = exports.AuthApiAxiosParamCreator = exports.AppsApi = exports.AppsApiFactory = exports.AppsApiFp = exports.AppsApiAxiosParamCreator = exports.SortOrder = exports.ExtractionResultsSortBy = exports.DocumentStatus = exports.DocExConfidence = exports.AppRunStatus = void 0;
var axios_1 = require("axios");
var common_1 = require("./common");
var base_1 = require("./base");
var AppRunStatus;
(function (AppRunStatus) {
    AppRunStatus["InProgress"] = "InProgress";
    AppRunStatus["Completed"] = "Completed";
    AppRunStatus["Failed"] = "Failed";
    AppRunStatus["Waiting"] = "Waiting";
})(AppRunStatus = exports.AppRunStatus || (exports.AppRunStatus = {}));
var DocExConfidence;
(function (DocExConfidence) {
    DocExConfidence["High"] = "High";
    DocExConfidence["Low"] = "Low";
    DocExConfidence["UserReviewed"] = "UserReviewed";
})(DocExConfidence = exports.DocExConfidence || (exports.DocExConfidence = {}));
var DocumentStatus;
(function (DocumentStatus) {
    DocumentStatus["UploadingFile"] = "UploadingFile";
    DocumentStatus["DetectingText"] = "DetectingText";
    DocumentStatus["ExtractingData"] = "ExtractingData";
    DocumentStatus["WaitingForButlerOpsReview"] = "WaitingForButlerOpsReview";
    DocumentStatus["WaitingForUserReview"] = "WaitingForUserReview";
    DocumentStatus["Completed"] = "Completed";
    DocumentStatus["Failed"] = "Failed";
})(DocumentStatus = exports.DocumentStatus || (exports.DocumentStatus = {}));
var ExtractionResultsSortBy;
(function (ExtractionResultsSortBy) {
    ExtractionResultsSortBy["DocumentId"] = "DocumentId";
})(ExtractionResultsSortBy = exports.ExtractionResultsSortBy || (exports.ExtractionResultsSortBy = {}));
var SortOrder;
(function (SortOrder) {
    SortOrder["Asc"] = "Asc";
    SortOrder["Desc"] = "Desc";
})(SortOrder = exports.SortOrder || (exports.SortOrder = {}));
exports.AppsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        getAppRunStatus: function (appRunId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            common_1.assertParamExists('getAppRunStatus', 'appRunId', appRunId);
                            localVarPath = "/api/apps/app_runs/{appRunId}/status"
                                .replace("{" + "appRunId" + "}", encodeURIComponent(String(appRunId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            return [4, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        getDocumentExtractionResults: function (appRunId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            common_1.assertParamExists('getDocumentExtractionResults', 'appRunId', appRunId);
                            localVarPath = "/api/apps/app_runs/{appRunId}/document_extraction"
                                .replace("{" + "appRunId" + "}", encodeURIComponent(String(appRunId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            return [4, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        uploadDocuments: function (appId, files, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarFormParams, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            common_1.assertParamExists('uploadDocuments', 'appId', appId);
                            localVarPath = "/api/apps/{appId}/upload_documents"
                                .replace("{" + "appId" + "}", encodeURIComponent(String(appId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
                            return [4, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            _a.sent();
                            if (files) {
                                files.forEach(function (element) {
                                    localVarFormParams.append('files', element);
                                });
                            }
                            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = localVarFormParams;
                            return [2, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.AppsApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.AppsApiAxiosParamCreator(configuration);
    return {
        getAppRunStatus: function (appRunId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, localVarAxiosParamCreator.getAppRunStatus(appRunId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        getDocumentExtractionResults: function (appRunId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, localVarAxiosParamCreator.getDocumentExtractionResults(appRunId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        uploadDocuments: function (appId, files, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, localVarAxiosParamCreator.uploadDocuments(appId, files, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.AppsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.AppsApiFp(configuration);
    return {
        getAppRunStatus: function (appRunId, options) {
            return localVarFp.getAppRunStatus(appRunId, options).then(function (request) { return request(axios, basePath); });
        },
        getDocumentExtractionResults: function (appRunId, options) {
            return localVarFp.getDocumentExtractionResults(appRunId, options).then(function (request) { return request(axios, basePath); });
        },
        uploadDocuments: function (appId, files, options) {
            return localVarFp.uploadDocuments(appId, files, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
var AppsApi = (function (_super) {
    __extends(AppsApi, _super);
    function AppsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AppsApi.prototype.getAppRunStatus = function (appRunId, options) {
        var _this = this;
        return exports.AppsApiFp(this.configuration).getAppRunStatus(appRunId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    AppsApi.prototype.getDocumentExtractionResults = function (appRunId, options) {
        var _this = this;
        return exports.AppsApiFp(this.configuration).getDocumentExtractionResults(appRunId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    AppsApi.prototype.uploadDocuments = function (appId, files, options) {
        var _this = this;
        return exports.AppsApiFp(this.configuration).uploadDocuments(appId, files, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return AppsApi;
}(base_1.BaseAPI));
exports.AppsApi = AppsApi;
exports.AuthApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        login: function (loginBodyDto, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    common_1.assertParamExists('login', 'loginBodyDto', loginBodyDto);
                    localVarPath = "/api/auth";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = common_1.serializeDataIfNeeded(loginBodyDto, localVarRequestOptions, configuration);
                    return [2, {
                            url: common_1.toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.AuthApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.AuthApiAxiosParamCreator(configuration);
    return {
        login: function (loginBodyDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, localVarAxiosParamCreator.login(loginBodyDto, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.AuthApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.AuthApiFp(configuration);
    return {
        login: function (loginBodyDto, options) {
            return localVarFp.login(loginBodyDto, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
var AuthApi = (function (_super) {
    __extends(AuthApi, _super);
    function AuthApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AuthApi.prototype.login = function (loginBodyDto, options) {
        var _this = this;
        return exports.AuthApiFp(this.configuration).login(loginBodyDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return AuthApi;
}(base_1.BaseAPI));
exports.AuthApi = AuthApi;
exports.QueuesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        extractDocument: function (queueId, file, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarFormParams, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            common_1.assertParamExists('extractDocument', 'queueId', queueId);
                            localVarPath = "/api/queues/{queueId}/documents"
                                .replace("{" + "queueId" + "}", encodeURIComponent(String(queueId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
                            return [4, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            _a.sent();
                            if (file !== undefined) {
                                localVarFormParams.append('file', file);
                            }
                            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = localVarFormParams;
                            return [2, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        getExtractionResults: function (queueId, uploadId, afterId, beforeId, limit, sortOrder, extraResults, sortBy, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            common_1.assertParamExists('getExtractionResults', 'queueId', queueId);
                            common_1.assertParamExists('getExtractionResults', 'uploadId', uploadId);
                            localVarPath = "/api/queues/{queueId}/extraction_results"
                                .replace("{" + "queueId" + "}", encodeURIComponent(String(queueId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            return [4, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            _a.sent();
                            if (afterId !== undefined) {
                                localVarQueryParameter['afterId'] = afterId;
                            }
                            if (beforeId !== undefined) {
                                localVarQueryParameter['beforeId'] = beforeId;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (sortOrder !== undefined) {
                                localVarQueryParameter['sortOrder'] = sortOrder;
                            }
                            if (uploadId !== undefined) {
                                localVarQueryParameter['uploadId'] = uploadId;
                            }
                            if (extraResults) {
                                localVarQueryParameter['extraResults'] = extraResults;
                            }
                            if (sortBy !== undefined) {
                                localVarQueryParameter['sortBy'] = sortBy;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        uploadDocumentsToQueue: function (queueId, files, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarFormParams, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            common_1.assertParamExists('uploadDocumentsToQueue', 'queueId', queueId);
                            localVarPath = "/api/queues/{queueId}/uploads"
                                .replace("{" + "queueId" + "}", encodeURIComponent(String(queueId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
                            return [4, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            _a.sent();
                            if (files) {
                                files.forEach(function (element) {
                                    localVarFormParams.append('files', element);
                                });
                            }
                            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = localVarFormParams;
                            return [2, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.QueuesApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.QueuesApiAxiosParamCreator(configuration);
    return {
        extractDocument: function (queueId, file, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, localVarAxiosParamCreator.extractDocument(queueId, file, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        getExtractionResults: function (queueId, uploadId, afterId, beforeId, limit, sortOrder, extraResults, sortBy, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, localVarAxiosParamCreator.getExtractionResults(queueId, uploadId, afterId, beforeId, limit, sortOrder, extraResults, sortBy, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        uploadDocumentsToQueue: function (queueId, files, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, localVarAxiosParamCreator.uploadDocumentsToQueue(queueId, files, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.QueuesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.QueuesApiFp(configuration);
    return {
        extractDocument: function (queueId, file, options) {
            return localVarFp.extractDocument(queueId, file, options).then(function (request) { return request(axios, basePath); });
        },
        getExtractionResults: function (queueId, uploadId, afterId, beforeId, limit, sortOrder, extraResults, sortBy, options) {
            return localVarFp.getExtractionResults(queueId, uploadId, afterId, beforeId, limit, sortOrder, extraResults, sortBy, options).then(function (request) { return request(axios, basePath); });
        },
        uploadDocumentsToQueue: function (queueId, files, options) {
            return localVarFp.uploadDocumentsToQueue(queueId, files, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
var QueuesApi = (function (_super) {
    __extends(QueuesApi, _super);
    function QueuesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    QueuesApi.prototype.extractDocument = function (queueId, file, options) {
        var _this = this;
        return exports.QueuesApiFp(this.configuration).extractDocument(queueId, file, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    QueuesApi.prototype.getExtractionResults = function (queueId, uploadId, afterId, beforeId, limit, sortOrder, extraResults, sortBy, options) {
        var _this = this;
        return exports.QueuesApiFp(this.configuration).getExtractionResults(queueId, uploadId, afterId, beforeId, limit, sortOrder, extraResults, sortBy, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    QueuesApi.prototype.uploadDocumentsToQueue = function (queueId, files, options) {
        var _this = this;
        return exports.QueuesApiFp(this.configuration).uploadDocumentsToQueue(queueId, files, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return QueuesApi;
}(base_1.BaseAPI));
exports.QueuesApi = QueuesApi;
//# sourceMappingURL=api.js.map